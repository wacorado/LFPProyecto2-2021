*************************************** Split *******************************************
if lineaGramatica == ['*', '']:
            listadeListasGramatica.append(cadenaConcaten)
            cadenaConcaten=""

    for obj in listaLineasArchivo:
                print(obj)

    print (cadenaConcaten)
    indexPrueba = len(listadeListasGramatica)
    for i in range (indexPrueba):
        if(i==1):
            print("primera gramatica")
            print(listadeListasGramatica[0])
        #elif (i==2):
            #print("Segunda Gramatica")
            #print(listaLineasArchivo[2])


            if lineaGramatica == ['*', '']:
            listadeListasGramatica.append(cadenaConcaten)
            cadenaConcaten=""


            for linea in archivoLectura:
        cadenaConcaten
        lineaGramatica=linea.split()
        #print(lineaGramatica)
        listaLineasArchivo.append(lineaGramatica)
        if lineaGramatica == ['*']:
            listaTemp=listaLineasArchivo[:]
            gramatica=listaTemp[:]
            listadeListasGramatica.append(gramatica)
            listaLineasArchivo.clear

    for obj in listadeListasGramatica:
        print(obj)    


-------------------------------------- recoridos para eliminar Gramatidas ----------------------------------------------------------

    indexBusquedaExterna = len(listaGramaticasTc)
    for x in range(indexBusquedaExterna):
        indexBusquedaMedio = len(listaGramaticasTc[x])
        for y in range(indexBusquedaMedio):
            if(y==2):
                indexBusquedaInterna = len(listaGramaticasTc[x][y])
                for z in range(indexBusquedaInterna):
                    if(int(len(listaGramaticasTc[x][y][z])>=3)):
                        bandera=True
        if(bandera==False):
            del(listaGramaticasTc[x])
        else:
            bandera=False


             elif(y==2):
                CadenaMostrarGram=CadenaMostrarGram+"                       Producciones:  \n"
                indexInterno2=len(listaGramaticasT[x][y])
                for z in range(indexInterno2):
                    CadenaMostrarGram=CadenaMostrarGram+"                         "+str(listaGramaticasT[x][y][z])+" \n"



                    print("------------------- Otras Producciones -----------------------------------------------")
    for x in range(indexPrincipal):
        indexInterno = len(listaGramaticasTc[x])
        print(indexInterno)
        for y in range(indexInterno):
            #print("prueba"+str(y))
            if(y==2):
                indexBusquedaInterna = len(listaGramaticasTc[x][y])
                print(indexBusquedaInterna)
                for z in range(indexBusquedaInterna):
                    print(str(listaGramaticasTc[x][y][z]))
                    print(int(len(listaGramaticasTc[x][y][z])))
                    if(int(len(listaGramaticasTc[x][y][z])>=4)):
                        bandera=True
                print(bandera)        
        if(bandera==False):
            del(listaGramaticasTc[x])
            del(listaGramaticasT[x])
        else:
            bandera=False



    x    indexExterno=len(listaGramaticasTc)
    for v in range(indexExterno):
        indexInterno1=len(listaGramaticasTc[v])
        for w in range(indexInterno1):
            indexInterno2 = len(listaGramaticasTc[v][w])
            if(y==2):
                print(str(listaGramaticasTc[v][w]))
                for x in range(indexInterno2):
                    indexInterno3= len(listaGramaticasTc[v][w][x])
                    print(str(listaGramaticasTc[v][w][x]))
                    for y in range(indexInterno3):
                        print(int(len(listaGramaticasTc[v][w][x][y])))
                        print(str(listaGramaticasTc[v][w][x][y]))
                        if(x==0):
                            cadenaTemp="Î»,"+str(listaGramaticasTc[v][w][x][y])+";"
                        else:
                            cadenaTemp=cadenaTemp+str(listaGramaticasTc[v][w][x][y])
                    listaProducciones.append(cadenaTemp)

    for obj in listaProducciones:
        print(obj)