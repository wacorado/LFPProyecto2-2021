*************************************** Split *******************************************
if lineaGramatica == ['*', '']:
            listadeListasGramatica.append(cadenaConcaten)
            cadenaConcaten=""

    for obj in listaLineasArchivo:
                print(obj)

    print (cadenaConcaten)
    indexPrueba = len(listadeListasGramatica)
    for i in range (indexPrueba):
        if(i==1):
            print("primera gramatica")
            print(listadeListasGramatica[0])
        #elif (i==2):
            #print("Segunda Gramatica")
            #print(listaLineasArchivo[2])


            if lineaGramatica == ['*', '']:
            listadeListasGramatica.append(cadenaConcaten)
            cadenaConcaten=""


            for linea in archivoLectura:
        cadenaConcaten
        lineaGramatica=linea.split()
        #print(lineaGramatica)
        listaLineasArchivo.append(lineaGramatica)
        if lineaGramatica == ['*']:
            listaTemp=listaLineasArchivo[:]
            gramatica=listaTemp[:]
            listadeListasGramatica.append(gramatica)
            listaLineasArchivo.clear

    for obj in listadeListasGramatica:
        print(obj)    


-------------------------------------- recoridos para eliminar Gramatidas ----------------------------------------------------------

    indexBusquedaExterna = len(listaGramaticasTc)
    for x in range(indexBusquedaExterna):
        indexBusquedaMedio = len(listaGramaticasTc[x])
        for y in range(indexBusquedaMedio):
            if(y==2):
                indexBusquedaInterna = len(listaGramaticasTc[x][y])
                for z in range(indexBusquedaInterna):
                    if(int(len(listaGramaticasTc[x][y][z])>=3)):
                        bandera=True
        if(bandera==False):
            del(listaGramaticasTc[x])
        else:
            bandera=False


             elif(y==2):
                CadenaMostrarGram=CadenaMostrarGram+"                       Producciones:  \n"
                indexInterno2=len(listaGramaticasT[x][y])
                for z in range(indexInterno2):
                    CadenaMostrarGram=CadenaMostrarGram+"                         "+str(listaGramaticasT[x][y][z])+" \n"



                    print("------------------- Otras Producciones -----------------------------------------------")
    for x in range(indexPrincipal):
        indexInterno = len(listaGramaticasTc[x])
        print(indexInterno)
        for y in range(indexInterno):
            #print("prueba"+str(y))
            if(y==2):
                indexBusquedaInterna = len(listaGramaticasTc[x][y])
                print(indexBusquedaInterna)
                for z in range(indexBusquedaInterna):
                    print(str(listaGramaticasTc[x][y][z]))
                    print(int(len(listaGramaticasTc[x][y][z])))
                    if(int(len(listaGramaticasTc[x][y][z])>=4)):
                        bandera=True
                print(bandera)        
        if(bandera==False):
            del(listaGramaticasTc[x])
            del(listaGramaticasT[x])
        else:
            bandera=False



    x    indexExterno=len(listaGramaticasTc)
    for v in range(indexExterno):
        indexInterno1=len(listaGramaticasTc[v])
        for w in range(indexInterno1):
            indexInterno2 = len(listaGramaticasTc[v][w])
            if(y==2):
                print(str(listaGramaticasTc[v][w]))
                for x in range(indexInterno2):
                    indexInterno3= len(listaGramaticasTc[v][w][x])
                    print(str(listaGramaticasTc[v][w][x]))
                    for y in range(indexInterno3):
                        print(int(len(listaGramaticasTc[v][w][x][y])))
                        print(str(listaGramaticasTc[v][w][x][y]))
                        if(x==0):
                            cadenaTemp="λ,"+str(listaGramaticasTc[v][w][x][y])+";"
                        else:
                            cadenaTemp=cadenaTemp+str(listaGramaticasTc[v][w][x][y])
                    listaProducciones.append(cadenaTemp)

    for obj in listaProducciones:
        print(obj)















    
    
nombreAutomata="AP_"
    terminales=""
    alfabetoPila=""
    estados="Estados = {i,p,q,f}"
    estadoInicio="Estado Inicio = { i }"
    estadoFin="Estado Fin = { f }"
    listaProducciones=[]
    cadenaProduccionesAutomata=""

    listaGramaticasTc2= deepcopy(listaGramaticasT)
    indexPrincipal = len (listaGramaticasTc2)
    for x in range(indexPrincipal):
        indexInterno = len(listaGramaticasTc2[x])
        for y in range(indexInterno):
            if(y==2):
                tempProducciones = list(listaGramaticasTc2[x][y])
                indexProducciones = len(tempProducciones)
                for z in range(indexProducciones):
                    cadenaProduccion = str(listaGramaticasTc2[x][y][z]).split("->")
                    cadenaProduccion2=(str(cadenaProduccion).split(","))
                    print(str(cadenaProduccion2[1]))
                    print(str(cadenaProduccion2[0].replace("[\"[\'","")))
                    indexProdAuto = len(cadenaProduccion2)
                    for w in range(indexProdAuto):
                        if(w==0):
                            #indexProdAuto2=len(cadenaProduccion2[w])
                            cadenaTemp1=str(cadenaProduccion2[w].replace("[\"[\'",""))
                            cadenaTemp2=cadenaTemp1.replace("\"","")
                            cadProdTempAuto="λ,"+cadenaTemp2+";"
                        elif(w==(indexProdAuto-1)):
                            cadenaTemp3=str(cadenaProduccion2[w].replace(" \"",""))
                            cadenaTemp4=cadenaTemp3.replace("\']\"]","")
                            cadenaTemp7=cadenaTemp4.replace("\']]","")
                            cadenaTemp9=cadenaTemp7.replace(" \'","")
                            cadProdTempAuto=cadProdTempAuto+cadenaTemp9
                        else:
                            cadenaTemp5=str(cadenaProduccion2[w].replace(" \"",""))
                            cadenaTemp6=cadenaTemp5.replace(" \'","")
                            cadenaTemp8=cadenaTemp6.replace("\'","")
                            cadProdTempAuto=cadProdTempAuto+cadenaTemp8
                    
                    #producciones.append(cadenaProduccion2)1

                    listaProducciones.append(cadProdTempAuto)
                    cadProdTempAuto=""
    #banderaNodos=True
    #contador = 0
    #while(banderaNodos):
        #if(contador==0):
            
  
    indexExterno = len(listaGramaticasT)
    for x in range(indexExterno):
        indexMedio = len(listaGramaticasT[x])
        for y in range (indexMedio):
            if(y==0):
                nombreAutomata=nombreAutomata+str(listaGramaticasT[x][y])
            elif(y==1):
                indexInterno1=len(listaGramaticasT[x][y])
                for z in range(indexInterno1):
                    if(z==0):
                        noTerminales=str(listaGramaticasT[x][y][z])
                    elif(z==1):
                        terminales=terminales+"Terminales = {"+str(listaGramaticasT[x][y][z])+"} \n"
                        alfabetoPila=alfabetoPila+"Alfabeto de Pila = {"+str(listaGramaticasT[x][y][z])+","+noTerminales+", #"
                        indexTerminales = len(listaGramaticasT[x][y][z])
                        for w in range(indexTerminales):
                            produccionTemp=str(listaGramaticasT[x][y][z][w])+","+str(listaGramaticasT[x][y][z][w])+";λ"
                            listaProducciones.append(produccionTemp)
                            produccionTemp=""
        print(nombreAutomata)
        listaNombresGramaticasAP.append(nombreAutomata)
        print(terminales)
        listaTerminalesGramaticasAP.append(terminales)
        print(alfabetoPila)
        listaAlfabetoGramaticasAP.append(terminales)
        print(estados)
        print(estadoInicio)
        print(estadoFin)
        for obj in listaProducciones:
            print(obj)
        listaProduccionesGramaticasAp.append(list(listaProducciones))
        
        #cadenaFinalProduccionAutomataPila=nombreAutomata+";"+terminales+";"+alfabetoPila+";"+estados+";"+estadoInicio+";"+estadoFin+";"+str(listaProducciones)
        #listaGramaticaAutoPila.append(cadenaFinalProduccionAutomataPila)
        listaProducciones.clear()
        indexInicioProducciones = len(listaProduccionesGramaticasAp)
        for x in range(indexInicioProducciones):
            indexMedioProducciones = len(listaProduccionesGramaticasAp[x])
            for y in range(indexMedioProducciones):
                cadenaProduccionesAutomata=cadenaProduccionesAutomata+str(listaProduccionesGramaticasAp[x][y])+"\n"
            print(cadenaProduccionesAutomata)
        crearGrafo()
    indexInicioProducciones = len(listaProduccionesGramaticasAp)
    for x in range(indexInicioProducciones):
        indexMedioProducciones = len(listaProduccionesGramaticasAp[x])
        for y in range(indexMedioProducciones):
            cadenaProduccionesAutomata=cadenaProduccionesAutomata+str(listaProduccionesGramaticasAp[x][y])+"\n"
        print(cadenaProduccionesAutomata)





        for x in range(indexPrincipal):
        indexInterno = len(listaGramaticasTc2[x])
        for y in range(indexInterno):
            if(y==2):
                tempProducciones = list(listaGramaticasTc2[x][y])
                indexProducciones = len(tempProducciones)
                for z in range(indexProducciones):
                    cadenaProduccion = str(listaGramaticasTc2[x][y][z]).split("->")
                    cadenaProduccion2=(str(cadenaProduccion).split(","))
                    indexProdAuto = len(cadenaProduccion2)
                    for w in range(indexProdAuto):
                        if(w==0):
                            cadenaTemp1=str(cadenaProduccion2[w].replace("[\"[\'",""))
                            cadenaTemp2=cadenaTemp1.replace("\"","")
                            cadProdTempAuto="λ,"+cadenaTemp2+";"
                        elif(w==(indexProdAuto-1)):
                            cadenaTemp3=str(cadenaProduccion2[w].replace(" \"",""))
                            cadenaTemp4=cadenaTemp3.replace("\']\"]","")
                            cadenaTemp7=cadenaTemp4.replace("\']]","")
                            cadenaTemp9=cadenaTemp7.replace(" \'","")
                            cadProdTempAuto=cadProdTempAuto+cadenaTemp9
                        else:
                            cadenaTemp5=str(cadenaProduccion2[w].replace(" \"",""))
                            cadenaTemp6=cadenaTemp5.replace(" \'","")
                            cadenaTemp8=cadenaTemp6.replace("\'","")
                            cadProdTempAuto=cadProdTempAuto+cadenaTemp8
                    listaProducciones.append(cadProdTempAuto)
                    cadProdTempAuto=""




                    file.write("<br>")
    file.write("<table>")
    file.write("<tr><td><h2>Listas Ordenadas</h2></td></tr>")
    for i in listaNumerosOrdenados:
        file.write("<tr><td>"+i+"</td></tr>")
        file.write("\n")
    file.write("<tr><td><h2>Listas Busqueda</h2></td></tr>")
    for i in listaBusquedas:
        file.write("<tr><td>"+i+"</td></tr>")
        file.write("\n")
    file.write("</table>")



    def crearGrafo():
    global contadorGraficas
    file = open("grafo"+str(contadorGraficas)+".dot","w")
    file.write("digraph G{\n")
    file.write("rankdir=LR;\n")
    file.write(crearNodo("A","i","circle"))
    file.write(crearNodo("B","p","circle"))
    file.write(crearNodo("C","q","circle"))
    file.write(crearNodo("D","f","doublecircle"))
    file.write(unionNodo("A","B")+"[label = \"λ,λ;#\"];")
    file.write(unionNodo("B","C")+"[label = \"λ,λ;"+str(listaGramaticasT[0][1][2]).replace("']","")+"\"];")
    file.write(unionNodo("C","C"))
    file.write(unionNodo("C","D"))
    #file.write("A -> B -> C")
    #file.write("A[labe=\"Walther Corado\"]\n")
    file.write("}")
    file.close()
    os.system('dot -Tpng grafo'+str(contadorGraficas)+'.dot -o grafo'+str(contadorGraficas)+'.png')
    #os.startfile("grafo.png")
    contadorGraficas=contadorGraficas+1





    elif(pilaAutomata[indexPilaEstudiada-1]==cadenaIngreso[contadorCadenaIngreso]):
                            if(str(produccion[z+1])=="λ"):
                                pilaAutomata.remove(str(pilaAutomata[indexPilaEstudiada-1]))
                                #pilaAutomata.append(str(produccion[z+1]))
                                listaEstadoPila.append(list(pilaAutomata))
                                cadenaIngreso.replace(str(cadenaIngreso[contadorCadenaIngreso],""))
                                grafoEstadoQ()
                                imprimePila()
                                contadorCadenaIngreso=contadorCadenaIngreso+1
                            else:
                                pilaAutomata.remove(str(pilaAutomata[indexPilaEstudiada-1]))
                                pilaAutomata.append(str(produccion[z+1]))
                                listaEstadoPila.append(list(pilaAutomata))
                                cadenaIngreso.replace(str(cadenaIngreso[contadorCadenaIngreso],""))
                                grafoEstadoQ()
                                imprimePila()
                                contadorCadenaIngreso=contadorCadenaIngreso+1